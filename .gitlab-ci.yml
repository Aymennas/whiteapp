.common_maven: &common_maven
  image:
    name: cacib-boot-docker-stable-intranet.registry.saas.cagip.group.gca/boot/base-images/maven:3.6.1-jdk-11-git-openssh-slim
    
.ci_tools_kustomize: &ci_tools_kustomize
  image:
    name: layer-kraft.registry.saas.cagip.group.gca/ci-tools/kustomize:v3.8.7
  
.ci_tools_promote: &ci_tools_promote
  image:
    name: layer-kraft.registry.saas.cagip.group.gca/ci-tools/promote:latest
    
.common_tag: &common_tag
  tags:
  - kubernetes
  
.common_deploy: &common_deploy
  before_script:
    - 'which ssh-agent || ( apk --update add openssh-client )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo "$BOOT_GITLAB_SSH_KEY" |  tr -d ' ' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.ca.cib >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"

stages:
  - build
  - test
  - versionning
  - sonar_check
  - build_docker
  - deploy_dev
  - promote_staging
  - deploy_int
  - deploy_uat
  - promote_stable
  - deploy_pprd
  - deploy_prd
  
variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Djavax.net.ssl.trustStore=certificates/cacerts"
  VERSION_FILE: "target/version.env"
  GIT_SSH_COMMAND: "ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa"

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository/
      - .sonar/cache
    policy: pull-push
    
build:
  artifacts:
    when: on_success
    paths:
      - target/
  
  stage: build
  <<: *common_maven
  <<: *common_tag
  script:
    - mkdir -p .m2
    - cp settings.xml .m2/
    - mvn $MAVEN_CLI_OPTS compile

test:
  artifacts:
    when: on_success
    paths:
      - target/
  stage: test
  <<: *common_maven
  <<: *common_tag
  script:
    - mvn $MAVEN_CLI_OPTS test

generate_tag:
  artifacts:
    when: on_success
    paths:
      - target/
  stage: versionning
  <<: *common_maven
  <<: *common_tag
  extends: .common_deploy
  only:
   - master
  
  script:
    - git checkout master
    - mvn $MAVEN_CLI_OPTS -Darguments="-Djavax.net.ssl.trustStore=certificates/cacerts -DskipTests=true" release:prepare -B -DscmCommentPrefix='[ci-skip]' -Dresume=false -DtagNameFormat=@{project.version}
    - 'APPLICATION_TAG_VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)'
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git checkout $APPLICATION_TAG_VERSION
    - mvn $MAVEN_CLI_OPTS -DskipTests=true clean package
    - echo $APPLICATION_TAG_VERSION >> target/version.env
    - cat target/version.env

quality_check:
  stage: sonar_check
  image:
    name: cacib-boot-docker-stable-intranet.registry.saas.cagip.group.gca/boot/base-images/sonar-scanner:4.2
  <<: *common_tag
  variables:
    SONAR_TOKEN: "${BOOT_SONAR_TOKEN}"
    SONAR_HOST_URL: "${BOOT_SONAR_INSTANCE}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    SONAR_SCANNER_OPTS: "-Dsonar.java.binaries=target/classes" # -Djavax.net.ssl.trustStore=certificates/cacerts
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task

  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$BOOT_SONAR_KEY -Dsonar.projectVersion=$APPLICATION_TAG_VERSION
  only:
   - master
    
build_docker:
  stage: build_docker
  image:
    name: docker-remote.registry.saas.cagip.group.gca/kaniko-project/executor:debug-v1.0.0
  <<: *common_tag
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"https://$BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY\":{\"auth\":\"$(echo -n $BOOT_ARTI_USER:$BOOT_ARTI_PASSWORD | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - wget -qO - http://crl-priv-pki.credit-agricole.fr/ca/cacreditagricoleserver.crt >> /kaniko/ssl/certs/additional-ca-cert-bundle.crt
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --build-arg http_proxy=$http_proxy --build-arg https_proxy=$http_proxy --build-arg no_proxy=$no_proxy --destination $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION --build-arg TAG=$APPLICATION_TAG_VERSION

  only:
   - master

deploy_dev:
  stage: deploy_dev
  <<: *ci_tools_kustomize
  <<: *common_tag
  <<: *common_deploy
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git clone $BOOT_GITLAB_DEPLOY_REPO yaml_deploy_folder
    - cd yaml_deploy_folder/dev
    - kustomize edit set image $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO=$BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION
    - |-
        if ! git diff-index --quiet HEAD --; then
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git push
        else
            echo "Nothing to push"
        fi
    
  only:
   - master
   
promote_staging:
  stage: promote_staging
  when: manual
  <<: *ci_tools_kustomize
  <<: *common_tag
  variables:
    CREDS: "${BOOT_ARTI_USER}:${BOOT_ARTI_PASSWORD}"
    SOURCE_REPO: "${BOOT_ARTI_SCRATCH_REGISTRY}"
    TARGET_REPO: "${BOOT_ARTI_STAGING_REGISTRY}"
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - 'curl -S -k -u ${CREDS} -XPOST https://$BOOT_ARTI_REGISTRY/artifactory/api/docker/$SOURCE_REPO/v2/promote -H "Content-Type: application/json" -d"{\"targetRepo\":\"${TARGET_REPO}\",\"dockerRepository\":\"${BOOT_ARTI_REPO}\",\"tag\":\"${APPLICATION_TAG_VERSION}\",\"copy\":true}"'
    
  only:
   - master
   
deploy_int:
  stage: deploy_int
  when: manual
  <<: *ci_tools_kustomize
  <<: *common_tag
  <<: *common_deploy
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git clone $BOOT_GITLAB_DEPLOY_REPO yaml_deploy_folder
    - cd yaml_deploy_folder/int
    - kustomize edit set image $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO=$BOOT_ARTI_STAGING_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION
    - |-
        if ! git diff-index --quiet HEAD --; then
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git -c http.sslVerify=false push
        else
            echo "Nothing to push"
        fi
    
  only:
   - master
   
deploy_uat:
  stage: deploy_uat
  when: manual
  <<: *ci_tools_kustomize
  <<: *common_tag
  <<: *common_deploy
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git clone $BOOT_GITLAB_DEPLOY_REPO yaml_deploy_folder
    - cd yaml_deploy_folder/uat
    - kustomize edit set image $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO=$BOOT_ARTI_STAGING_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION
    - |-
        if ! git diff-index --quiet HEAD --; then
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git push
        else
            echo "Nothing to push"
        fi
    
  only:
   - master
   
promote_stable:
  stage: promote_stable
  when: manual
  <<: *ci_tools_promote
  <<: *common_tag
  variables:
    SOURCE_REPO: "${BOOT_ARTI_STAGING_REGISTRY}"
    TARGET_REPO: "${BOOT_ARTI_STABLE_REGISTRY}"
    IMAGE: "${BOOT_ARTI_REPO}"
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - docker-promote --tag=$APPLICATION_TAG_VERSION
    
  only:
   - master
   
deploy_preprod:
  stage: deploy_pprd
  when: manual
  <<: *ci_tools_kustomize
  <<: *common_tag
  <<: *common_deploy
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git -c http.sslVerify=false clone $BOOT_GITLAB_DEPLOY_REPO yaml_deploy_folder
    - cd yaml_deploy_folder/pprd
    - kustomize edit set image $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO=$STABLE_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION
    - |-
        if ! git -c http.sslVerify=false diff-index --quiet HEAD --; then
            git config --global user.name "$GITLAB_USER_NAME"
            git config --global user.email "$GITLAB_USER_EMAIL"
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git -c http.sslVerify=false push
            cd ..
            git clone $BOOT_GITLAB_CAGIP_DEPLOY_REPO preprod_deploy_folder
            cd preprod_deploy_folder
            git checkout preprod
            mkdir -p base preproduction
            cp -a ../base/. base/
            cp -a ../pprd/. preproduction/
            git config --global user.name "$GITLAB_USER_NAME"
            git config --global user.email "$GITLAB_USER_EMAIL"
            git add -A
            git commit -m "Rollout version $APPLICATION_TAG_VERSION on preproduction environment"
            git push
        else
           echo "Nothing to push"
        fi
    
  only:
   - master
   
deploy_prod:
  stage: deploy_prd
  when: manual
  <<: *ci_tools_kustomize
  <<: *common_tag
  <<: *common_deploy
  script:
    - APPLICATION_TAG_VERSION=`cat $VERSION_FILE`
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - git -c http.sslVerify=false clone $BOOT_GITLAB_DEPLOY_REPO yaml_deploy_folder
    - cd yaml_deploy_folder/prd
    - kustomize edit set image $BOOT_ARTI_SCRATCH_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO=$STABLE_REGISTRY.$BOOT_ARTI_REGISTRY/$BOOT_ARTI_REPO:$APPLICATION_TAG_VERSION
    - |-
        if ! git -c http.sslVerify=false diff-index --quiet HEAD --; then
            git config --global user.name "$GITLAB_USER_NAME"
            git config --global user.email "$GITLAB_USER_EMAIL"
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git -c http.sslVerify=false push
            cd ..
            git clone $BOOT_GITLAB_CAGIP_DEPLOY_REPO prod_deploy_folder
            cd prod_deploy_folder
            git checkout prod
            mkdir -p base production
            cp -a ../base/. base/
            cp -a ../prd/. production/
            git config --global user.name "$GITLAB_USER_NAME"
            git config --global user.email "$GITLAB_USER_EMAIL"
            git add -A
            git commit -m "Rollout version $APPLICATION_TAG_VERSION on production environment"
            git push
            
        else
            echo "Nothing to push"
        fi
    
  only:
   - master
